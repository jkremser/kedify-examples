apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: stable-diff-rabbitmq-connection
spec:
  secretTargetRef:
    - parameter: host
      name: stablediff-rabbitmq
      key: host
---
apiVersion: keda.sh/v1alpha1
kind: ScaledJob
metadata:
  name: stable-diff-job
spec:
  jobTargetRef:
    template:
      spec:
        containers:
        - image: ghcr.io/kedify/stable-diffusion-worker
          name: stable-diffusion-worker
          imagePullPolicy: IfNotPresent
          resources:
            # uncomment if you want one GPU exclusively for this app, otherwise the GPU will be shared among many
            # limits:
            #   nvidia.com/gpu: "1"
            requests:
              cpu: 500m
              memory: 1Gi
          volumeMounts:
          - name: shared-images
            mountPath: /app/results
          env:
          - name: AMQP_URL
            valueFrom:
              secretKeyRef:
                name: stablediff-rabbitmq
                key: host
          - name: DEVICE
            value: GPU
        - image: minio/mc
          name: minio-sidecar
          env:
          - name: MINIO_USERNAME
            valueFrom:
              secretKeyRef:
                name: minio
                key: rootUser
          - name: MINIO_PASSWORD
            valueFrom:
              secretKeyRef:
                name: minio
                key: rootPassword
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          command: ["/bin/sh", "-c"]
          args:
          - |
            mc alias set shared http://minio:9000 $MINIO_USERNAME $MINIO_PASSWORD;
            mc admin info shared;
            echo "Minio configured, waiting for the result.."
            until [ -f /images/*.png ] && [ -f /images/*.json ]; do sleep 1; printf .; done
            echo -e "\nResults have been found: \n$(ls /images)\nSyncing.."
            mc mirror /images shared/images;

          volumeMounts:
          - name: shared-images
            mountPath: /images
        # if possible, spread the pods across all schedulable nodes
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: stable-diffusion-worker
        volumes:
        - name: shared-images
          emptyDir: {}
    backoffLimit: 4  
  pollingInterval: 10
  maxReplicaCount: 8
  rollout:
    strategy: default
    propagationPolicy: foreground

  triggers:
    # https://keda.sh/docs/2.14/scalers/rabbitmq-queue/
    - type: rabbitmq
      metadata:
        protocol: amqp
        queueName: tasks
        mode: QueueLength # QueueLength or MessageRate
        value: "1"
        activationValue: "0"
      authenticationRef:
        name: stable-diff-rabbitmq-connection
